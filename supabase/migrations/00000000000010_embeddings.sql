create extension vector;
create table documents (
    id bigint generated by default as identity primary key,
    content text,
    embedding vector(1536),
    type text,
    source_id bigint,
     unique (type, source_id)
);
create or replace function match_documents (
  query_embedding vector(1536),
  match_threshold float,
  match_count int
)
returns table (
  id bigint,
  content text,
  similarity float
)
language plpgsql
as $$
begin
  return query
  select
    documents.id,
    documents.content,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where 1 - (documents.embedding <=> query_embedding) > match_threshold
  order by similarity desc
  limit match_count;
end;
$$;
create or replace function delete_document_on_thread_delete()
returns trigger as $$
begin
  delete from documents
  where type = 'thread' and source_id = old.id;
  return old;
end;
$$ language plpgsql;
create trigger trigger_delete_thread_document
after delete on forum_threads
for each row
execute function delete_document_on_thread_delete();
create or replace function delete_document_on_event_delete()
returns trigger as $$
begin
  delete from documents
  where type = 'event' and source_id = old.id;
  return old;
end;
$$ language plpgsql;
create trigger trigger_delete_event_document
after delete on events
for each row
execute function delete_document_on_event_delete();
create or replace function delete_document_on_content_delete()
returns trigger as $$
begin
  delete from documents
  where type = 'content' and source_id = old.id;
  return old;
end;
$$ language plpgsql;
create trigger trigger_delete_content_document
after delete on contents
for each row
execute function delete_document_on_content_delete();

create type speaker as enum ('user', 'ai');

create table conversations (
    id bigint generated by default as identity primary key,
    inserted_at timestamp with time zone default timezone('utc', now()) not null,
    user_id uuid not null references public.profiles(id),
    entry text,
    speaker speaker not null,
    constraint conversations_pkey primary key (id)
);

create or replace function delete_event_document_on_unapprove()
returns trigger as $$
begin
  if new.status is distinct from 'approved' then
    delete from documents
    where type = 'event' and source_id = new.event_id;
  end if;

  return new;
end;
$$ language plpgsql;
create trigger trigger_delete_event_document_on_unapprove
after insert on public.events_moderation
for each row execute function delete_event_document_on_unapprove();

create or replace function delete_content_document_on_unapprove()
returns trigger as $$
begin
  if new.status is distinct from 'approved' then
    delete from documents
    where type = 'content' and source_id = new.content_id;
  end if;

  return new;
end;
$$ language plpgsql;
create trigger trigger_delete_content_document_on_unapprove
after insert on public.contents_moderation
for each row execute function delete_content_document_on_unapprove();

create or replace function delete_thread_document_on_unapprove()
returns trigger as $$
begin
  if new.status is distinct from 'approved' then
    delete from documents
    where type = 'thread' and source_id = new.thread_id;
  end if;

  return new;
end;
$$ language plpgsql;
create trigger trigger_delete_thread_document_on_unapprove
after insert on public.forum_threads_moderation
for each row execute function delete_thread_document_on_unapprove();


alter table documents enable row level security;
alter table conversations enable row level security;

create policy "Allow users to insert own documents" on public.documents for
on public.documents
for insert
to authenticated
with check (true);

create policy "Allow users to update own documents"
on public.documents
for update
to authenticated
using (true)
with check (true);

create policy "Allow all read access to documents"
on documents
for select
using (true);

create policy "Allow users to delete own documents"
on public.documents
for delete
to authenticated
using (true);

create policy "Allow users to access to own conversations" on public.conversations
as permissive for all to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy "Allow users to insert their own conversations" on public.conversations
for insert to authenticated with check (auth.uid() = user_id);

