create extension vector;

create table documents (
    id bigint generated by default as identity primary key,
    content text,
    embedding vector(1536)
);

create or replace function match_documents (
  query_embedding vector(1536),
  match_threshold float,
  match_count int
)
returns table (
  id bigint,
  content text,
  similarity float
)
language plpgsql
as $$
begin
  return query
  select
    documents.id,
    documents.content,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where 1 - (documents.embedding <=> query_embedding) > match_threshold
  order by similarity desc
  limit match_count;
end;
$$;

alter table documents enable row level security;

create type speaker as enum ('user', 'ai');

create table conversations (
    id bigint generated by default as identity primary key,
    inserted_at timestamp with time zone default timezone('utc', now()) not null,
    user_id uuid not null references public.profiles(id),
    entry text,
    speaker speaker not null,
    constraint conversations_pkey primary key (id)
);

alter table conversations enable row level security;

create policy "Allow users to read documents" on public.documents for
insert using auth.uid() = user_id;

CREATE POLICY "Allow all read access to documents"
ON documents
FOR SELECT
USING (true);

create policy "Allow users to access to own conversations" on public.conversations
as permissive for all to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy "users can insert their own conversations" on public.conversations
for insert to authenticated with check (auth.uid() = user_id);

