-- Comments
create table public.thread_comments (
  id bigint generated by default as identity primary key,
  thread_id bigint not null references public.forum_threads(id) on delete cascade,
  user_id uuid not null references public.profiles(id),
  content text not null,
  inserted_at timestamp with time zone default timezone('utc', now()) not null,
  updated_at timestamp with time zone default timezone('utc', now()) not null,
  is_reply boolean not null default false,
  parent_id bigint references public.thread_comments(id) on delete set null
);
alter table public.thread_comments
add column fts tsvector generated always as (
		to_tsvector('simple', ' ' || content)
	) stored;
create index thread_comments_fts on public.thread_comments using gin (fts);
create trigger handle_updated_at before
update on public.thread_comments for each row execute procedure moddatetime (updated_at);
create table public.thread_comments_moderation(
	id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	comment_id bigint references public.thread_comments on delete cascade not null,
	user_id uuid references public.profiles not null,
	status public.moderation_status not null,
	comment text not null
);
create function public.handle_thread_comment_moderation_updates() returns trigger language plpgsql security definer as $$ begin
insert into public.thread_comments_moderation (comment_id, user_id, status, comment)
values (
		new.id,
		new.user_id,
		'approved'::moderation_status,
		'Auto-approved'
	);
return new;
end;
$$;
create trigger on_thread_comments_insert
after
insert on public.thread_comments for each row execute procedure public.handle_thread_comment_moderation_updates();
create trigger on_thread_comments_update
after
update on public.thread_comments for each row execute procedure public.handle_thread_comment_moderation_updates();
create table public.thread_comments_liked (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  user_id uuid references public.profiles not null,
  comment_id bigint references public.thread_comments on delete cascade not null,
  unique (user_id, comment_id)
);
create function public.get_forum_thread_comments_count(thread_id int) returns table (count int) language sql security definer
as $$
  select count(*) from thread_comments
  where thread_id = get_forum_thread_comments_count.thread_id;
$$;
create view public.forum_threads_view with (security_invoker = on) as
select
    p.*,
    m.status as moderation_status,
    coalesce((
        select count(*)
        from public.forum_threads_liked ftl
        where ftl.thread_id = p.id
    ), 0) as likes_count,
    coalesce((
        select count(*)
        from public.thread_comments tc
        where tc.thread_id = p.id
    ), 0) as comments_count
from public.forum_threads p
left join public.latest_forum_threads_moderation m on p.id = m.thread_id;
create function public.get_thread_comment_likes_count(comment_id bigint, user_id uuid default null) returns table (count bigint, has_likes boolean) language sql security definer as $$
select count(*) as likes_count,
	case
		when exists (
			select 1
			from public.thread_comments_liked
			where user_id = $2
				and comment_id = $1
		) then true
		else false
	end as has_likes
from public.thread_comments_liked
where comment_id = $1;
$$;
create view public.latest_thread_comments_moderation with (security_invoker = on) as
select distinct on (comment_id) *
from public.thread_comments_moderation
order by comment_id,
	inserted_at desc;
create view public.thread_comments_view with (security_invoker = on) as
select
	p.*,
	m.status as moderation_status,
	coalesce((
		select count(*)
		from public.thread_comments_liked ftl
		where ftl.comment_id = p.id
	), 0) as likes_count
from public.thread_comments p
left join public.latest_thread_comments_moderation m on p.id = m.comment_id;
-- RLS policies
alter table public.thread_comments enable row level security;
alter table public.thread_comments_moderation enable row level security;
alter table public.thread_comments_liked enable row level security;
create policy "Allow users to read approved thread comments" on public.thread_comments for
select using (
		exists (
			select 1
			from public.thread_comments_moderation
			where comment_id = thread_comments.id
				and status = 'approved'::public.moderation_status
		)
	);
create policy "Allow users to read their own thread comments" on public.thread_comments for
select using (auth.uid() = user_id);
create policy "Allow users to create their own thread comments" on public.thread_comments for
insert with check (
		(
			select authorize('thread_comments.create')
		)
		and auth.uid() = user_id
	);
create policy "Allow users to update their own thread comments" on public.thread_comments for
update using (
		(
			select authorize('thread_comments.update')
		)
		and auth.uid() = user_id
	) with check (auth.uid() = user_id);
create policy "Allow users to delete their own thread comments" on public.thread_comments for delete using (
	(
		select authorize('thread_comments.delete')
	)
	and auth.uid() = user_id
);
create policy "Allow moderators read all thread comments" on public.thread_comments for
select using (
		(
			select authorize('thread_comments.moderate')
		)
	);
create policy "Allow moderators update all thread comments" on public.thread_comments for
update using (
		(
			select authorize('thread_comments.moderate')
		)
	);
create policy "Allow moderators delete all thread comments" on public.thread_comments for delete using (
	(
		select authorize('thread_comments.moderate')
	)
);
create policy "Allow users to read approved thread comments moderation" on public.thread_comments_moderation for
select using (
		status = 'approved'::public.moderation_status
	);
create policy "Allow users to read their own thread comments moderation" on public.thread_comments_moderation for
select using (auth.uid() = user_id);
create policy "Allow moderators to read all thread comments moderation" on public.thread_comments_moderation for
select using (
		(
			select authorize('thread_comments.moderate')
		)
	);
create policy "Allow moderators to insert thread comments moderation" on public.thread_comments_moderation for
insert with check (
		(
			select authorize('thread_comments.moderate')
		)
	);
create policy "Allow users to read their own thread comments liked" on public.thread_comments_liked for
select using (auth.uid() = user_id);
create policy "Allow users to create their own thread comments liked" on public.thread_comments_liked for
insert with check (
		(
			select authorize('thread_comments.create')
		)
		and auth.uid() = user_id
	);
create policy "Allow users to delete their own thread liked" on public.thread_comments_liked for delete using (
	(
		select authorize('thread_comments.delete')
	)
	and auth.uid() = user_id
);
create policy "Allow users to read all likes" on public.thread_comments_liked
for select using (true);
create policy "Allow users to upload images for their thread comments" on storage.objects for
insert to authenticated with check (bucket_id = 'thread_comments');