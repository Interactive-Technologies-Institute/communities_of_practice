/* FORUM */
create table public.forum_posts (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc', now()) not null,
  updated_at timestamp with time zone default timezone('utc', now()) not null,
  user_id uuid not null references public.profiles(id),
  title text not null,
  content text not null,
  tags text [] not null
);
alter table public.forum_posts
add column fts tsvector generated always as (
		to_tsvector('simple', title || ' ' || content)
	) stored;
create index forum_posts_fts on public.forum_posts using gin (fts);
create trigger handle_updated_at before
update on public.forum_posts for each row execute procedure moddatetime (updated_at);
create table public.forum_posts_moderation(
	id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	post_id bigint references public.forum_posts on delete cascade not null,
	user_id uuid references public.profiles not null,
	status public.moderation_status not null,
	comment text not null
);
create function public.handle_forum_post_moderation_updates() returns trigger language plpgsql security definer as $$ begin
insert into public.forum_posts_moderation (post_id, user_id, status, comment)
values (
		new.id,
		new.user_id,
		'pending'::moderation_status,
		'Pending moderation'
	);
return new;
end;
$$;
create trigger on_forum_posts_insert
after
insert on public.forum_posts for each row execute procedure public.handle_forum_post_moderation_updates();
create trigger on_forum_posts_update
after
update on public.forum_posts for each row execute procedure public.handle_forum_post_moderation_updates();
create table public.forum_posts_liked (
  id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  user_id uuid references public.profiles not null,
  post_id bigint references public.forum_posts not null,
  unique (user_id, post_id)
);
create function public.get_forum_post_likes_count(post_id bigint, user_id uuid default null) returns table (count bigint, has_likes boolean) language sql security definer as $$
select count(*) as likes_count,
	case
		when exists (
			select 1
			from public.forum_posts_liked
			where user_id = $2
				and post_id = $1
		) then true
		else false
	end as has_likes
from public.forum_posts_liked
where post_id = $1;
$$;
create view public.latest_forum_posts_moderation with (security_invoker = on) as
select distinct on (post_id) *
from public.forum_posts_moderation
order by post_id,
	inserted_at desc;
create view public.forum_posts_view with (security_invoker = on) as
select p.*,
	m.status as moderation_status
from public.forum_posts p
	left join public.latest_forum_posts_moderation m on p.id = m.post_id;
create view public.forum_posts_tags with (security_invoker = on) as
select unnest(tags) as tag,
	count(*) as count
from public.forum_posts
group by tag;
-- Comments
/*create table public.post_comments (
  id bigint generated by default as identity primary key,
  post_id bigint not null references public.forum_posts(id),
  user_id uuid not null references public.profiles(id),
  content text not null,
  inserted_at timestamp with time zone default timezone('utc', now()) not null,
  parent_id bigint references public.post_comments(id)
);*/
-- RLS policies
alter table public.forum_posts enable row level security;
alter table public.forum_posts_moderation enable row level security;
alter table public.forum_posts_liked enable row level security;
create policy "Allow users to read approved posts" on public.forum_posts for
select using (
		exists (
			select 1
			from public.forum_posts_moderation
			where post_id = forum_posts.id
				and status = 'approved'::public.moderation_status
		)
	);
create policy "Allow users to read their own posts" on public.forum_posts for
select using (auth.uid() = user_id);
create policy "Allow users to create their own posts" on public.forum_posts for
insert with check (
		(
			select authorize('forum_posts.create')
		)
		and auth.uid() = user_id
	);
create policy "Allow users to update their own posts" on public.forum_posts for
update using (
		(
			select authorize('forum_posts.update')
		)
		and auth.uid() = user_id
	) with check (auth.uid() = user_id);
create policy "Allow users to delete their own posts" on public.forum_posts for delete using (
	(
		select authorize('forum_posts.delete')
	)
	and auth.uid() = user_id
);
create policy "Allow moderators read all posts" on public.forum_posts for
select using (
		(
			select authorize('forum_posts.moderate')
		)
	);
create policy "Allow moderators update all posts" on public.forum_posts for
update using (
		(
			select authorize('forum_posts.moderate')
		)
	);
create policy "Allow moderators delete all posts" on public.forum_posts for delete using (
	(
		select authorize('forum_posts.moderate')
	)
);
create policy "Allow users to read approved posts moderation" on public.forum_posts_moderation for
select using (
		status = 'approved'::public.moderation_status
	);
create policy "Allow users to read their own posts moderation" on public.forum_posts_moderation for
select using (auth.uid() = user_id);
create policy "Allow moderators to read all posts moderation" on public.forum_posts_moderation for
select using (
		(
			select authorize('forum_posts.moderate')
		)
	);
create policy "Allow moderators to insert posts moderation" on public.forum_posts_moderation for
insert with check (
		(
			select authorize('forum_posts.moderate')
		)
	);
create policy "Allow users to read their own posts liked" on public.forum_posts_liked for
select using (auth.uid() = user_id);
create policy "Allow users to create their own posts liked" on public.forum_posts_liked for
insert with check (
		(
			select authorize('forum_posts.create')
		)
		and auth.uid() = user_id
	);
create policy "Allow users to delete their own post liked" on public.forum_posts_liked for delete using (
	(
		select authorize('forum_posts.delete')
	)
	and auth.uid() = user_id
);
create policy "Allow users to upload images for their posts" on storage.objects for
insert to authenticated with check (bucket_id = 'forum_posts');