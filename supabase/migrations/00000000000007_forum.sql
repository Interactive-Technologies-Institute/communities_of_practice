/* FORUM */
create table public.forum_threads (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc', now()) not null,
  updated_at timestamp with time zone default timezone('utc', now()) not null,
  user_id uuid not null references public.profiles(id),
  title text not null,
  content text not null,
  tags text [] not null
);
alter table public.forum_threads
add column fts tsvector generated always as (
		to_tsvector('simple', title || ' ' || content)
	) stored;
create index forum_threads_fts on public.forum_threads using gin (fts);
create trigger handle_updated_at before
update on public.forum_threads for each row execute procedure moddatetime (updated_at);
create table public.forum_threads_moderation(
	id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	thread_id bigint references public.forum_threads on delete cascade not null,
	user_id uuid references public.profiles not null,
	status public.moderation_status not null,
	comment text not null
);
create function public.handle_forum_thread_moderation_updates() returns trigger language plpgsql security definer as $$ begin
insert into public.forum_threads_moderation (thread_id, user_id, status, comment)
values (
		new.id,
		new.user_id,
		'pending'::moderation_status,
		'Pending moderation'
	);
return new;
end;
$$;
create trigger on_forum_threads_insert
after
insert on public.forum_threads for each row execute procedure public.handle_forum_thread_moderation_updates();
create trigger on_forum_threads_update
after
update on public.forum_threads for each row execute procedure public.handle_forum_thread_moderation_updates();
create table public.forum_threads_liked (
  id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  user_id uuid references public.profiles not null,
  thread_id bigint references public.forum_threads not null,
  unique (user_id, thread_id)
);
create function public.get_forum_thread_likes_count(thread_id bigint, user_id uuid default null) returns table (count bigint, has_likes boolean) language sql security definer as $$
select count(*) as likes_count,
	case
		when exists (
			select 1
			from public.forum_threads_liked
			where user_id = $2
				and thread_id = $1
		) then true
		else false
	end as has_likes
from public.forum_threads_liked
where thread_id = $1;
$$;
create view public.latest_forum_threads_moderation with (security_invoker = on) as
select distinct on (thread_id) *
from public.forum_threads_moderation
order by thread_id,
	inserted_at desc;
create view public.forum_threads_view with (security_invoker = on) as
select p.*,
	m.status as moderation_status
from public.forum_threads p
	left join public.latest_forum_threads_moderation m on p.id = m.thread_id;
create view public.forum_threads_tags with (security_invoker = on) as
select unnest(tags) as tag,
	count(*) as count
from public.forum_threads
group by tag;
-- Comments
/*create table public.thread_comments (
  id bigint generated by default as identity primary key,
  thread_id bigint not null references public.forum_threads(id),
  user_id uuid not null references public.profiles(id),
  content text not null,
  inserted_at timestamp with time zone default timezone('utc', now()) not null,
  parent_id bigint references public.thread_comments(id)
);*/
-- RLS policies
alter table public.forum_threads enable row level security;
alter table public.forum_threads_moderation enable row level security;
alter table public.forum_threads_liked enable row level security;
create policy "Allow users to read approved threads" on public.forum_threads for
select using (
		exists (
			select 1
			from public.forum_threads_moderation
			where thread_id = forum_threads.id
				and status = 'approved'::public.moderation_status
		)
	);
create policy "Allow users to read their own threads" on public.forum_threads for
select using (auth.uid() = user_id);
create policy "Allow users to create their own threads" on public.forum_threads for
insert with check (
		(
			select authorize('forum_threads.create')
		)
		and auth.uid() = user_id
	);
create policy "Allow users to update their own threads" on public.forum_threads for
update using (
		(
			select authorize('forum_threads.update')
		)
		and auth.uid() = user_id
	) with check (auth.uid() = user_id);
create policy "Allow users to delete their own threads" on public.forum_threads for delete using (
	(
		select authorize('forum_threads.delete')
	)
	and auth.uid() = user_id
);
create policy "Allow moderators read all threads" on public.forum_threads for
select using (
		(
			select authorize('forum_threads.moderate')
		)
	);
create policy "Allow moderators update all threads" on public.forum_threads for
update using (
		(
			select authorize('forum_threads.moderate')
		)
	);
create policy "Allow moderators delete all threads" on public.forum_threads for delete using (
	(
		select authorize('forum_threads.moderate')
	)
);
create policy "Allow users to read approved threads moderation" on public.forum_threads_moderation for
select using (
		status = 'approved'::public.moderation_status
	);
create policy "Allow users to read their own threads moderation" on public.forum_threads_moderation for
select using (auth.uid() = user_id);
create policy "Allow moderators to read all threads moderation" on public.forum_threads_moderation for
select using (
		(
			select authorize('forum_threads.moderate')
		)
	);
create policy "Allow moderators to insert threads moderation" on public.forum_threads_moderation for
insert with check (
		(
			select authorize('forum_threads.moderate')
		)
	);
create policy "Allow users to read their own threads liked" on public.forum_threads_liked for
select using (auth.uid() = user_id);
create policy "Allow users to create their own threads liked" on public.forum_threads_liked for
insert with check (
		(
			select authorize('forum_threads.create')
		)
		and auth.uid() = user_id
	);
create policy "Allow users to delete their own thread liked" on public.forum_threads_liked for delete using (
	(
		select authorize('forum_threads.delete')
	)
	and auth.uid() = user_id
);
create policy "Allow users to upload images for their threads" on storage.objects for
insert to authenticated with check (bucket_id = 'forum_threads');