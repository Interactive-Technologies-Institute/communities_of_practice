/* HOW TOS */
create type public.how_to_difficulty as enum ('easy', 'medium', 'hard');
create type public.how_to_duration as enum ('short', 'medium', 'long');
create table public.howtos (
	id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
	user_id uuid references public.profiles not null,
	title text not null,
	description text not null,
	image text not null,
	tags text [] not null,
	difficulty public.how_to_difficulty not null,
	duration public.how_to_duration not null,
	steps jsonb [] not null
);
alter table public.howtos
add column fts tsvector generated always as (
		to_tsvector('simple', title || ' ' || description)
	) stored;
create index howtos_fts on public.howtos using gin (fts);
create trigger handle_updated_at before
update on public.howtos for each row execute procedure moddatetime (updated_at);
create table public.howtos_moderation(
	id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	howto_id bigint references public.howtos not null,
	user_id uuid references public.profiles not null,
	status public.moderation_status not null,
	comment text not null
);
create function public.handle_howto_moderation_updates() returns trigger language plpgsql security definer as $$ begin
insert into public.howtos_moderation (howto_id, user_id, status, comment)
values (
		new.id,
		new.user_id,
		'pending'::moderation_status,
		'Pending moderation'
	);
return new;
end;
$$;
create trigger on_howtos_insert
after
insert on public.howtos for each row execute procedure public.handle_howto_moderation_updates();
create trigger on_howtos_update
after
update on public.howtos for each row execute procedure public.handle_howto_moderation_updates();
create table public.howtos_useful(
	id bigint generated by default as identity primary key,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	user_id uuid references public.profiles not null,
	howto_id bigint references public.howtos not null,
	unique (user_id, howto_id)
);
create function public.get_howto_useful_count(howto_id bigint, user_id uuid default null) returns table (count bigint, has_useful boolean) language sql security definer as $$
select count(*) as count,
	case
		when exists (
			select 1
			from public.howtos_useful
			where user_id = user_id
				and howto_id = howto_id
		) then true
		else false
	end as has_useful
from public.howtos_useful
where howto_id = howto_id;
$$;
create view public.latest_howtos_moderation with (security_invoker = on) as
select distinct on (howto_id) *
from public.howtos_moderation
order by howto_id,
	inserted_at desc;
create view public.howtos_view with (security_invoker = on) as
select h.*,
	m.status as moderation_status
from public.howtos h
	join public.latest_howtos_moderation m on h.id = m.howto_id;
create view public.howtos_tags with (security_invoker = on) as
select unnest(tags) as tag,
	count(*) as count
from public.howtos
group by tag;
-- Storage Buckets
-- insert into storage.buckets (id, name, public, allowed_mime_types)
-- values ('howtos', 'How Tos', true, '{"image/*"}');
-- RLS policies
alter table public.howtos enable row level security;
alter table public.howtos_moderation enable row level security;
alter table public.howtos_useful enable row level security;
create policy "Allow users to read approved howtos" on public.howtos for
select using (
		exists (
			select 1
			from public.howtos_moderation
			where howto_id = howtos.id
				and status = 'approved'::public.moderation_status
		)
	);
create policy "Allow users to read their own howtos" on public.howtos for
select using (auth.uid() = user_id);
create policy "Allow users to create their own howtos" on public.howtos for
insert with check (
		(
			select authorize('howtos.create')
		)
		and auth.uid() = user_id
	);
create policy "Allow users to update their own howtos" on public.howtos for
update using (
		(
			select authorize('howtos.update')
		)
		and auth.uid() = user_id
	) with check (auth.uid() = user_id);
create policy "Allow users to delete their own howtos" on public.howtos for delete using (
	(
		select authorize('howtos.delete')
	)
	and auth.uid() = user_id
);
create policy "Allow moderators read all howtos" on public.howtos for
select using (
		(
			select authorize('howtos.moderate')
		)
	);
create policy "Allow moderators update all howtos" on public.howtos for
update using (
		(
			select authorize('howtos.moderate')
		)
	);
create policy "Allow moderators delete all howtos" on public.howtos for delete using (
	(
		select authorize('howtos.moderate')
	)
);
create policy "Allow users to read approved howtos moderation" on public.howtos_moderation for
select using (
		status = 'approved'::public.moderation_status
	);
create policy "Allow users to read their own howtos moderation" on public.howtos_moderation for
select using (auth.uid() = user_id);
create policy "Allow moderators to read all howtos moderation" on public.howtos_moderation for
select using (
		(
			select authorize('howtos.moderate')
		)
	);
create policy "Allow moderators to insert howtos moderation" on public.howtos_moderation for
insert with check (
		(
			select authorize('howtos.moderate')
		)
	);
create policy "Allow users to read their own howtos useful" on public.howtos_useful for
select using (auth.uid() = user_id);
create policy "Allow users to create their own howtos useful" on public.howtos_useful for
insert with check (
		(
			select authorize('howtos.create')
		)
		and auth.uid() = user_id
	);
create policy "Allow users to delete their own howtos useful" on public.howtos_useful for delete using (
	(
		select authorize('howtos.delete')
	)
	and auth.uid() = user_id
);
create policy "Allow users to upload images for their howtos" on storage.objects for
insert to authenticated with check (bucket_id = 'howtos');